<?php

namespace AppBundle\Repository;

/**
 * CommentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CommentRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * @return array
     */
    public function findTopCommentatorsAction(){

       return $this->createQueryBuilder('comment')
            ->select(
                "count(comment.id) as comments_count",
                'user.id as user_id',
                'user.name  as user_name'
            )
            ->leftJoin('comment.user','user')
            ->orderBy('comments_count', 'DESC')
            ->groupBy('user.id')
            ->setMaxResults( 5 )
            ->getQuery()
            ->getArrayResult();

    }

    /**
     * @return array
     */
    public function findTopTopicsAction()
    {

        $em = $this->getEntityManager();

        $query = '
            SELECT count(comment.id) as comments_count, news_id, news.name as news_name
            FROM comment
            JOIN news ON comment.news_id = news.id
            where  WEEK(comment.created_at) >= WEEK(CURRENT_DATE - INTERVAL 1 WEEK)
            group by news_id
            order by comments_count DESC
            limit 3;
        ';

        $statement = $em->getConnection()->prepare($query);
        $statement->execute();
        return $statement->fetchAll();
    }
    /**
     * @param $commentator_id
     * @return int
     */
    public function findTotalCommentsByCommentator($commentator_id){

        $result = $this->createQueryBuilder('comment')
            ->select('count(comment) as totalCount')
        //    ->leftJoin('news.category','category')
            ->where('comment.user = :id')
            ->setParameter('id', $commentator_id)
            ->getQuery()
            ->getScalarResult();

        return (int) $result[0]['totalCount'];

    }

    /**
     * @param $commentator_id
     * @param $current_page
     * @param $products_per_page
     * @return array
     */
    public function findCommentsPerPageByCommentator($commentator_id, $current_page, $products_per_page){

        $start_row =$current_page * $products_per_page - $products_per_page;

        $result = $this->createQueryBuilder('comment')
            ->select(
                'comment.text as comment_text',
                'news.id as news_id',
                'news.name as news_name',
                'comment.createdAt as createdAt',
                'comment.plus as plus',
                'comment.minus as minus'
              )
            ->leftJoin('comment.news', 'news')
            ->leftJoin('comment.user','user')
            ->where('user.id = :id')
            ->setParameter('id', $commentator_id)
            ->setFirstResult( $start_row )
            ->setMaxResults( $products_per_page )
            ->orderBy('createdAt', 'DESC')
            ->getQuery()
            ->getArrayResult();

        return $result;
    }

    /**
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function createAlphabeticalQueryBuilder()
    {
        return $this->createQueryBuilder('comment')
            ->orderBy('comment.text', 'ASC');
    }

    /**
     * @return array
     */
    public function findAllOrderByCreationNotActive(){

        return $this->createQueryBuilder('comment')
            ->where('comment.isActive IS NULL')
            ->orWhere('comment.isActive = 0')
            ->orderBy('comment.createdAt', 'DESC')
            ->getQuery()
            ->getArrayResult();

    }

    /**
     * @return array
     */
    public function findAllCommentsPerPageOrderByCreation($current_page, $products_per_page){

        $start_row =$current_page * $products_per_page - $products_per_page;

        return $this->createQueryBuilder('comment')
            ->setFirstResult( $start_row )
            ->setMaxResults( $products_per_page )
            ->orderBy('comment.createdAt', 'DESC')
            ->getQuery()
            ->getArrayResult();

    }

    /**
     * @return array
     */
    public function findTotalComments(){

        $result = $this->createQueryBuilder('comment')
            ->select('count(comment) as totalCount')
            ->getQuery()
            ->getScalarResult();

        return (int) $result[0]['totalCount'];

    }

    /**
     * @return array
     */
    public function findAllCommentsPerPageOrderByCreationNotActive($current_page, $products_per_page){

        $start_row =$current_page * $products_per_page - $products_per_page;

        return $this->createQueryBuilder('comment')
            ->where('comment.isActive IS NULL')
            ->orWhere('comment.isActive = 0')
            ->setFirstResult( $start_row )
            ->setMaxResults( $products_per_page )
            ->orderBy('comment.createdAt', 'DESC')
            ->getQuery()
            ->getArrayResult();

    }

    /**
     * @return array
     */
    public function findTotalCommentsNotActive(){

        $result = $this->createQueryBuilder('comment')
            ->select('count(comment) as totalCount')
            ->where('comment.isActive IS NULL')
            ->orWhere('comment.isActive = 0')
            ->getQuery()
            ->getScalarResult();

        return (int) $result[0]['totalCount'];

    }
}
